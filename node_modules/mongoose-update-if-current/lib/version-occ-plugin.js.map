{"version":3,"sources":["../src/version-occ-plugin.js"],"names":["versionOCCPlugin","schema","versionKey","get","pre","next","$where","increment"],"mappings":";;;;;;;AACA;;;;;;;;;;AAEA;;;;;AAKO,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AACvC;AACA,MAAMC,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAW,YAAX,CAAnB;AACA,0BAAOD,UAAP,EAAmB,yCAAnB,EAHuC,CAKvC;;AACAD,EAAAA,MAAM,CAACG,GAAP,CAAW,MAAX,EAAmB,UAASC,IAAT,EAAe;AAChC;AACA,SAAKC,MAAL,qBACK,KAAKA,MADV,sBAEGJ,UAFH,EAEgB,KAAKA,UAAL,CAFhB,GAFgC,CAOhC;;AACA,SAAKK,SAAL,GARgC,CAUhC;;AACAF,IAAAA,IAAI;AACL,GAZD;AAaD","sourcesContent":["/* eslint-disable no-invalid-this */\nimport assert from 'assert';\n\n/**\n * Implement optimistic concurrency control using a schema's version key.\n *\n * @param {mongoose.Schema} schema - A Mongoose schema to be plugged into.\n */\nexport function versionOCCPlugin(schema) {\n  // Get version key name\n  const versionKey = schema.get('versionKey');\n  assert(versionKey, 'document schema must have a version key');\n\n  // Add pre-save hook to check version\n  schema.pre('save', function(next) {\n    // Condition the save on the versions matching\n    this.$where = {\n      ...this.$where,\n      [versionKey]: this[versionKey],\n    };\n\n    // Increment the version atomically\n    this.increment();\n\n    // Invoke next hook\n    next();\n  });\n}\n"],"file":"version-occ-plugin.js"}