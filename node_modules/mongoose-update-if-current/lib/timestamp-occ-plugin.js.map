{"version":3,"sources":["../src/timestamp-occ-plugin.js"],"names":["timestampOCCPlugin","schema","$timestamps","updatedAt","hooks","Kareem","pre","next","$where","s","merge"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;AAEA;;;;;AAKO,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;AACzC,0BAAOA,MAAM,CAACC,WAAd,EAA2B,qCAA3B;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACC,WAAP,CAAmBC,SAArC;AACA,0BAAOA,SAAP,EAAkB,kDAAlB,EAJyC,CAMzC;;AACA,MAAMC,KAAK,GAAG,IAAIC,kBAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,GAAN,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAC/B;AACA,SAAKC,MAAL,qBACK,KAAKA,MADV,sBAEGL,SAFH,EAEe,KAAKA,SAAL,CAFf,GAF+B,CAO/B;;AACAI,IAAAA,IAAI;AACL,GATD,EARyC,CAmBzC;AACA;;AACAN,EAAAA,MAAM,CAACQ,CAAP,CAASL,KAAT,GAAiBA,KAAK,CAACM,KAAN,CAAYT,MAAM,CAACQ,CAAP,CAASL,KAArB,CAAjB;AACD","sourcesContent":["/* eslint-disable no-invalid-this */\nimport assert from 'assert';\nimport Kareem from 'kareem';\n\n/**\n * Implement optimistic concurrency control using a schema's timestamps.\n *\n * @param {mongoose.Schema} schema - A Mongoose schema to be plugged into.\n */\nexport function timestampOCCPlugin(schema) {\n  assert(schema.$timestamps, 'schema must have timestamps enabled');\n\n  const updatedAt = schema.$timestamps.updatedAt;\n  assert(updatedAt, 'schema must have the updatedAt timestamp enabled');\n\n  // Add pre-save hook to check timestamp for concurrency control\n  const hooks = new Kareem();\n  hooks.pre('save', function(next) {\n    // Condition the save on the updatedAt timestamps matching\n    this.$where = {\n      ...this.$where,\n      [updatedAt]: this[updatedAt],\n    };\n\n    // Invoke next hook\n    next();\n  });\n\n  // Merge plugin hooks with schema hooks to ensure that the OCC hook\n  // is invoked before mongoose's built-in timestamp update hook\n  schema.s.hooks = hooks.merge(schema.s.hooks);\n}\n"],"file":"timestamp-occ-plugin.js"}